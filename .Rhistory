, box.rectangle = list(fill = myPal.range(100)[3], col = myPalDark[5], lwd = 1.5)
, box.dot = list(col = myPalDark[5], pch = 15, cex = 0.8, alpha = 0.5)
, superpose.line = list(col = myPalContrasts)
, superpose.symbol = list(col = myPalContrasts)
, axis.line = list(col = myPal[2])
, strip.background = list(col=myPal.range(100)[3])
, strip.border = list(col = myPal[2])
)
MyLatticeStrip = strip.custom(par.strip.text = MyLatticeFont)
# applied to ggplot2
myGgTheme <- theme(plot.title = element_text(colour = myPalDark[2], size = 10)
, axis.title = element_text(colour = myPalDark[2], size = 10)
, axis.text = element_text(colour = myPalDark[2], size = 10)
, legend.title = element_text(colour = myPalDark[2])
, legend.text = element_text(colour = myPalDark[2]))
myGgThemeSilentX <- theme(plot.title = element_text(colour = myPalDark[2], size = 10)
, axis.title = element_text(colour = myPalDark[2], size = 10)
, axis.text.y = element_text(colour = myPalDark[2], size = 10)
, axis.text.x = element_blank()
, legend.title = element_text(colour = myPalDark[2])
, legend.text = element_text(colour = myPalDark[2]))
myGgThemeSilentY <- theme(plot.title = element_text(colour = myPalDark[2], size = 10)
, axis.title = element_text(colour = myPalDark[2], size = 10)
, axis.text.x = element_text(colour = myPalDark[2], size = 10)
, axis.text.y = element_blank()
, legend.title = element_text(colour = myPalDark[2])
, legend.text = element_text(colour = myPalDark[2]))
ggplot(data = diamonds, aes(x=carat, y=y)) + geom_point() + myGgTheme
ggplot(data = diamonds, aes(x=carat, y=y)) + geom_point() + myGgTheme + theme_bw()
par(ask = FALSE)
ggplot(data = diamonds, aes(x=carat, y=y)) + geom_point() + myGgThemeSilentX + theme_bw()
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgThemeSilentX + theme_bw()
g
rm(myGgTheme)
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgTheme + theme_bw()
g
myGgTheme <- theme(plot.title = element_text(colour = myPalDark[2], size = 10)
, axis.title = element_text(colour = myPalDark[2], size = 10)
, axis.text = element_text(colour = myPalDark[2], size = 10)
, legend.title = element_text(colour = myPalDark[2])
, legend.text = element_text(colour = myPalDark[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgTheme + theme_bw()
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgTheme + theme_bw()
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgTheme
g
library(ggplot2)
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
myGgTheme + theme_bw()
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme + theme(axis.text.x = element_blank())
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgThemeSilentX <- myGgTheme + theme(axis.text.x = element_blank()
)
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgThemeSilentX
g
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 10)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.5)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.1)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 5)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 2)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 0.5)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.5)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.5)
, axis.ticks = element_line(colour = myPal[2], size = 0.5)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
library(caret)
library(dplyr)
library(lattice)
library(ggplot2)
library(parallel)
library(doParallel)
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
setData <- function(df, resp, makeFactorResp = FALSE) {
if (makeFactorResp) {
df[[resp]] <- factor(df[[resp]])
}
# write upstairs
df <<- df
resp <<- resp
}
rm(list=ls())
library(caret)
library(dplyr)
library(lattice)
library(ggplot2)
library(parallel)
library(doParallel)
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
# default data pack
data("diamonds")
setData <- function(df, resp, makeFactorResp = FALSE) {
if (makeFactorResp) {
df[[resp]] <- factor(df[[resp]])
}
# write upstairs
df <<- df
resp <<- resp
}
# stat learning project set up
source("utilityCode.R")
# choose your statistical learning method
algorithms <- c("gbm", "qda", "rf")
# list your transforms or just set for full set.
transforms <- c("pca", "set")
# set up the models matrix
models <- createModelsMatrix(algorithms, transforms)
models <- createModelMatrix(algorithms, transforms)
models
setData(diamonds, "cut")
# stat learning project set up
source("utilityCode.R")
# choose your statistical learning method
algorithms <- c("gbm", "qda", "rf")
# list your transforms or just set for full set.
transforms <- c("pca", "set")
# set up the models matrix
models <- createModelMatrix(algorithms, transforms)
# configure the data frame here
# refer out to any custom code, to do the basics
# such as making appropriate factors, ditching obviously useless columns
data("diamonds")
dt <- setData(diamonds, "cut")
myViolinPlot <- function(j, dt) {
bwplot(dt$dt.frm[[j]]~dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(dt$num_classes)
, scales = list(y = list(tck = c(1, 0)))
, panel = panel.superpose
, panel.groups = panel.violin
, xlab = dt$resp
, ylab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myViolinPlot(var, dt)
print(v)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myScatterPlot(var, dt)
print(v)
}
myScatterPlot <- function(j, dt) {
xyplot(dt$dt.frm[[j]]~I(1:nrow(dt$dt.frm)) | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, alpha = 1/((nrow(dt$dt.frm))/2000)
, ylab = j
, xlab = "index"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myViolinPlot <- function(j, dt) {
bwplot(dt$dt.frm[[j]]~dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, panel = panel.superpose
, panel.groups = panel.violin
, xlab = dt$resp
, ylab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
par(ask = TRUE)
for (var in dt$vars[!dt$vars_fac]) {
v <- myViolinPlot(var, dt)
print(v)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myScatterPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, xlab = j)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylap = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, type = density
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylap = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, type = density
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylab = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, lwd = 2
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, lwd = 1.25
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
na.vals.check <- function(dt) {
return(apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(dt$dt.frm[[j]]))/length(dt$dt.frm[[j]])
} ))
}
na.vals.check(dt)
dt$dt.frm[[1]]
is.na(dt$dt.frm[[1]])
sum(is.na(dt$dt.frm[[1]]))
length(dt$dt.frm[[1]])
apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(dt$dt.frm[[j]]))/length(dt$dt.frm[[j]])
} )
dt$dt.frm
sapply(dt$dt.frm, names)
sapply(dt$dt.frm, class)
sapply(dt$dt.frm, is.na)
sapply(dt$dt.frm, function(j) {is.na} )
sapply(dt$dt.frm, function() {is.na} )
aapply(dt$dt.frm, 2, function(j) {is.na} )
apply(dt$dt.frm, 2, function(j) {is.na} )
apply(dt$dt.frm, 2, function(j) {is.na(j)} )
na.vals.check <- function(dt) {
return(apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(j))/length(j)
} ))
}
na.vals.check(dt)
near.zero.vars.check <- function(dt) {
return(nearZeroVar(dt$dt.frm, saveMetrics = TRUE))
}
nzv.check <- function(dt) {
return(nearZeroVar(dt$dt.frm, saveMetrics = TRUE))
}
nzv.check(dt)
myStandardPartitioning <- function(dt, seed = 23) {
set.seed(seed)
# partitioning the data
training_ids <- createDataPartition(dt$dt.frm[[dt$resp]], p = 0.6, list = FALSE)
training_set <- dt$dt.frm[training_ids,]
holdout_set <- dt$dt.frm[-training_ids,]
validation_ids <- createDataPartition(holdout_set[[dt$resp]], p = 0.5, list = FALSE)
validation_set <- holdout_set[validation_ids, ]
test_set <- holdout_set[-validation_ids, ]
return(list(training_set, validation_set, test_set, training_ids, validation_ids))
}
trn.val.tst <- myStandardPartitioning(dt)
