, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 5)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 2)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = myPal[2], size = 0.5)
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 1)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.5)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
myGgTheme <- theme(plot.title = element_text(colour = myPal[2], size = 10)
, axis.title = element_text(colour = myPal[2], size = 10)
, axis.text = element_text(colour = myPal[2], size = 10)
, axis.line = element_line(colour = myPal[2], size = 0.5)
, axis.ticks = element_line(colour = myPal[2], size = 0.5)
, panel.border = element_rect(colour = "transparent")
, legend.title = element_text(colour = myPal[2])
, legend.text = element_text(colour = myPal[2]))
g <- ggplot(data = diamonds, aes(x=carat, y=y)) +
geom_point() +
theme_bw() + myGgTheme
g
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
library(caret)
library(dplyr)
library(lattice)
library(ggplot2)
library(parallel)
library(doParallel)
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
setData <- function(df, resp, makeFactorResp = FALSE) {
if (makeFactorResp) {
df[[resp]] <- factor(df[[resp]])
}
# write upstairs
df <<- df
resp <<- resp
}
rm(list=ls())
library(caret)
library(dplyr)
library(lattice)
library(ggplot2)
library(parallel)
library(doParallel)
source("https://raw.githubusercontent.com/julianhatwell/R_Themes/master/myFirstTheme.R")
# default data pack
data("diamonds")
setData <- function(df, resp, makeFactorResp = FALSE) {
if (makeFactorResp) {
df[[resp]] <- factor(df[[resp]])
}
# write upstairs
df <<- df
resp <<- resp
}
# stat learning project set up
source("utilityCode.R")
# choose your statistical learning method
algorithms <- c("gbm", "qda", "rf")
# list your transforms or just set for full set.
transforms <- c("pca", "set")
# set up the models matrix
models <- createModelsMatrix(algorithms, transforms)
models <- createModelMatrix(algorithms, transforms)
models
setData(diamonds, "cut")
# stat learning project set up
source("utilityCode.R")
# choose your statistical learning method
algorithms <- c("gbm", "qda", "rf")
# list your transforms or just set for full set.
transforms <- c("pca", "set")
# set up the models matrix
models <- createModelMatrix(algorithms, transforms)
# configure the data frame here
# refer out to any custom code, to do the basics
# such as making appropriate factors, ditching obviously useless columns
data("diamonds")
dt <- setData(diamonds, "cut")
myViolinPlot <- function(j, dt) {
bwplot(dt$dt.frm[[j]]~dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(dt$num_classes)
, scales = list(y = list(tck = c(1, 0)))
, panel = panel.superpose
, panel.groups = panel.violin
, xlab = dt$resp
, ylab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myViolinPlot(var, dt)
print(v)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myScatterPlot(var, dt)
print(v)
}
myScatterPlot <- function(j, dt) {
xyplot(dt$dt.frm[[j]]~I(1:nrow(dt$dt.frm)) | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, alpha = 1/((nrow(dt$dt.frm))/2000)
, ylab = j
, xlab = "index"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myViolinPlot <- function(j, dt) {
bwplot(dt$dt.frm[[j]]~dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, panel = panel.superpose
, panel.groups = panel.violin
, xlab = dt$resp
, ylab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
par(ask = TRUE)
for (var in dt$vars[!dt$vars_fac]) {
v <- myViolinPlot(var, dt)
print(v)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myScatterPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, xlab = j)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylap = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, type = density
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylap = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, type = density
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, ylab = "density"
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
myDensityPlot <- function(j, dt) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, lwd = 2
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
#, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
myDensityPlot <- function(j, dt, pnts) {
densityplot(~dt$dt.frm[[j]] | dt$dt.frm[[dt$resp]]
, groups = dt$dt.frm[[dt$resp]]
, plot.points = pnts
, lwd = 1.25
, col = myPal.rangeContrasts(
(dt$num_classes + 1)* 10)[seq(10, dt$num_classes*10, 10)]
, scales = list(y = list(tck = c(1, 0)))
, xlab = j
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
)
}
for (var in dt$vars[!dt$vars_fac]) {
v <- myDensityPlot(var, dt, pnts = FALSE)
print(v)
}
na.vals.check <- function(dt) {
return(apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(dt$dt.frm[[j]]))/length(dt$dt.frm[[j]])
} ))
}
na.vals.check(dt)
dt$dt.frm[[1]]
is.na(dt$dt.frm[[1]])
sum(is.na(dt$dt.frm[[1]]))
length(dt$dt.frm[[1]])
apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(dt$dt.frm[[j]]))/length(dt$dt.frm[[j]])
} )
dt$dt.frm
sapply(dt$dt.frm, names)
sapply(dt$dt.frm, class)
sapply(dt$dt.frm, is.na)
sapply(dt$dt.frm, function(j) {is.na} )
sapply(dt$dt.frm, function() {is.na} )
aapply(dt$dt.frm, 2, function(j) {is.na} )
apply(dt$dt.frm, 2, function(j) {is.na} )
apply(dt$dt.frm, 2, function(j) {is.na(j)} )
na.vals.check <- function(dt) {
return(apply(dt$dt.frm
, 2
, function(j) {
sum(is.na(j))/length(j)
} ))
}
na.vals.check(dt)
near.zero.vars.check <- function(dt) {
return(nearZeroVar(dt$dt.frm, saveMetrics = TRUE))
}
nzv.check <- function(dt) {
return(nearZeroVar(dt$dt.frm, saveMetrics = TRUE))
}
nzv.check(dt)
myStandardPartitioning <- function(dt, seed = 23) {
set.seed(seed)
# partitioning the data
training_ids <- createDataPartition(dt$dt.frm[[dt$resp]], p = 0.6, list = FALSE)
training_set <- dt$dt.frm[training_ids,]
holdout_set <- dt$dt.frm[-training_ids,]
validation_ids <- createDataPartition(holdout_set[[dt$resp]], p = 0.5, list = FALSE)
validation_set <- holdout_set[validation_ids, ]
test_set <- holdout_set[-validation_ids, ]
return(list(training_set, validation_set, test_set, training_ids, validation_ids))
}
trn.val.tst <- myStandardPartitioning(dt)
# stat learning project set up
source("utilityCode.R")
# choose your statistical learning method
algorithms <- c("gbm", "qda", "rf")
# list your transforms or just set for full set.
transforms <- c("pca", "set")
# set up the models matrix
models <- createModelMatrix(algorithms, transforms)
# such as making appropriate factors, ditching obviously useless columns
data("diamonds")
dt <- setData(diamonds, "cut")
# check for NA vals
na.vals.check(dt)
# and near zero variance
nzv.check(dt)
cor(dt$dt.frm[,vars[!vars_fac]])
head(dt$dt.frm)
head(dt$dt.frm[,])
head(dt$dt.frm[,dt$vars])
head(dt$dt.frm[,dt$vars[!dt$vars_fac]])
cor(dt$dt.frm[,dt$vars[!dt$vars_fac]])
upper.tri(cor(dt$dt.frm[,dt$vars[!dt$vars_fac]]))
summary(upper.tri(cor(dt$dt.frm[,dt$vars[!dt$vars_fac]])))
cor.dt <- cor(dt$dt.frm[,dt$vars[!dt$vars_fac]])
summary(cor.dt[upper.tri(cor.dt)])
cor.vars.check <- function(dt, ctff = 0.75) {
cor.dt <- cor(dt$dt.frm[,dt$vars[!dt$vars_fac]])
summary(cor.dt[upper.tri(cor.dt)])
return(findCorrelation(cor.dt, cutoff = ctff))
}
cor.vars.check(dt, 0.8)
linear.comb.check <- function(dt) {
findLinearCombosdt$dt.frm[,dt$vars]
}
lin.comb.check <- function(dt) {
findLinearCombosdt$dt.frm[,dt$vars]
}
lin.comb.check(dt)
lin.comb.check <- function(dt) {
findLinearCombos(dt$dt.frm[,dt$vars])
}
lin.comb.check(dt)
# look for linear dependencies
lin.comb.check <- function(dt) {
findLinearCombos(dt$dt.frm[,dt$vars[!dt$vars_fac]])
}
lin.comb.check(dt)
createDummies <- function(df, resp) {
dummify <- dummyVars(resp~.,data = df)
return(predict(dummify, df))
}
trn.val.tst <- myStandardPartitioning(dt)
trn.val.tst <- myStandardPartitioning(dt)
trn.val.tst[1]
myStandardPartitioning <- function(dt, seed = 23) {
set.seed(seed)
# partitioning the data
training_ids <- createDataPartition(dt$dt.frm[[dt$resp]], p = 0.6, list = FALSE)
training_set <- dt$dt.frm[training_ids,]
holdout_set <- dt$dt.frm[-training_ids,]
validation_ids <- createDataPartition(holdout_set[[dt$resp]], p = 0.5, list = FALSE)
validation_set <- holdout_set[validation_ids, ]
test_set <- holdout_set[-validation_ids, ]
return(list(training_set = training_set
, validation_set = validation_set
, test_set = test_set
, training_ids = training_ids
, validation_ids = validation_ids))
}
trn.val.tst <- myStandardPartitioning(dt)
trn.val.tst$training_set <- createDummies(trn.val.tst$training_set)
dvs <- createDummies(trn.val.tst$training_set)
trn.val.tst$training_set <- createDummies(trn.val.tst$training_set, dt$resp)
dummyVars(dt$resp~.,data = trn.val.tst$training_set)
dummyVars(cut~.,data = trn.val.tst$training_set)
dummyVars("cut"~.,data = trn.val.tst$training_set)
createDummies <- function(df, resp) {
dummify <- dummyVars(df[[resp]]~.,data = df)
return(predict(dummify, df))
}
trn.val.tst$training_set <- createDummies(trn.val.tst$training_set, dt$resp)
dummyVars(trn.val.tst$training_set[["cut"]]~.,data = trn.val.tst$training_set)
trn.val.tst$training_set[["cut"]]
dummyVars(trn.val.tst$training_set[["cut"]]~.,data = trn.val.tst$training_set[-dt$respCol])
dummyVars(cut~.,data = trn.val.tst$training_set)
dummyVars(trn.val.tst$training_set[cut]~.,data = trn.val.tst$training_set)
dummyVars(trn.val.tst$training_set[,cut]~.,data = trn.val.tst$training_set)
dummyVars(trn.val.tst$training_set[[cut]]~.,data = trn.val.tst$training_set)
dummyVars(cut~.,data = diamonds)
dummyVars(diamonds$cut~.,data = diamonds)
dummyVars(as.formula(diamonds$cut~.),data = diamonds)
fmla <- as.formula(paste0(dt$resp, "~."))
fmla
dummyVars(fmla,data = diamonds)
createDummies <- function(df, resp) {
fmla <- as.formula(paste0(resp, "~."))
dummify <- dummyVars(fmla,data = df)
return(predict(dummify, df))
}
trn.val.tst$training_set <- createDummies(trn.val.tst$training_set, dt$resp)
trn.val.tst$training_set
head(trn.val.tst$training_set)
names(trn.val.tst$training_set)
names(trn.val.tst$training_set)
dimnames(trn.val.tst$training_set)
class(trn.val.tst$training_set)
class(trn.val.tst$validation_set)
trn.val.tst <- myStandardPartitioning(dt)
class(trn.val.tst$validation_set)
class(trn.val.tst$training_set)
createDummies <- function(df, resp) {
fmla <- as.formula(paste0(resp, "~."))
dummify <- dummyVars(fmla,data = df)
return(as.data.frame(predict(dummify, df)))
}
trn.val.tst$training_set <- createDummies(trn.val.tst$training_set, dt$resp)
class(trn.val.tst$training_set)
head(trn.val.tst$training_set)
head(trn.val.tst$training_set$color..L)
head(trn.val.tst$validation_set$color)
histogram(trn.val.tst$training_set$color..L)
dotplot(trn.val.tst$training_set$color..L)
dotplot(~trn.val.tst$training_set$color..L)
rm(list = ls())
